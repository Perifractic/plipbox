#!/usr/bin/env python

import argparse

from ethertap import EtherTap
import netpkt.decode
import netpkt.arp
import netpkt.icmp

MY_MAC = (0x1a,0x11,0xaf,0xa0,0x47,0x1a)
MY_IP = (192,168,2,221)

def ethertap_test(eth_if, verbose=False):
  pd = netpkt.decode.PacketDecoder()
  pp = netpkt.decode.PrettyPrinter(MY_MAC)
  with EtherTap(eth_if) as et:
    # send a gracious ARP of my mac to announce my IP
    #arp_pkt = netpkt.arp.gen_arp_self_request(MY_MAC, MY_IP)
    #et.write(arp_pkt.get_packet())
    # main loop
    try:
      while True:
        raw_pkt = et.read()
        eth_pkt = pd.decode_raw(raw_pkt)
        # show a one liner of packet
        if verbose:
          one_line = pp.pkt_to_oneliner(eth_pkt)
          print one_line
        # handle arp request
        reply_pkt = netpkt.arp.handle_arp(eth_pkt, MY_MAC, MY_IP)
        if reply_pkt is None:
          # handle potential pings
          reply_pkt = netpkt.icmp.handle_ping(eth_pkt, MY_IP)
        # anything to reply?
        if reply_pkt is not None:
          raw_pkt = reply_pkt.get_packet()
          et.write(raw_pkt)
          if verbose:
            one_line = pp.pkt_to_oneliner(reply_pkt)
            print one_line

    except KeyboardInterrupt:
      print "***Break"

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be verbose")
  parser.add_argument('-i', '--interface', default='en3', help="ethernet interface to tap")
  args = parser.parse_args()
  ethertap_test(args.interface, verbose=args.verbose)

if __name__ == '__main__':
  main()
