#!/usr/bin/env python
#
# ethertap_test
#
# tap a given network interface and simulate a virtual host there
#
# the host responds to ARP requests for its mac address and tells its IP.
# the host replies ping requests and als replies UDP packets sent to 
# the special port 6800.
#
# use the latter with ./pio_test to measure the performance of UDP transfers.
#

from __future__ import print_function
import argparse

from ethertap import EtherTap
import netpkt.decode
import netpkt.arp
import netpkt.icmp
import netpkt.udp

def ethertap_test(eth_if, ip_addr_str, udp_port, mac_addr_str, verbose=False):
  # parse parameter
  ip_addr = map(int, ip_addr_str.split('.'))
  mac_addr = map(lambda x: int(x,16), mac_addr_str.split(':'))

  print("tapping interface '%s': virtual host mac='%s', ip=%s, udp=%d" % \
    (eth_if, mac_addr_str, ip_addr_str, udp_port))

  # setup decoder
  pd = netpkt.decode.PacketDecoder()
  pp = netpkt.decode.PrettyPrinter(mac_addr)
  
  # build tap
  with EtherTap(eth_if) as et:
    # send a gracious ARP of my mac to announce my IP
    arp_pkt = netpkt.arp.gen_arp_self_request(mac_addr, ip_addr)
    et.write(arp_pkt.get_packet())
    # main loop
    try:
      while True:
        raw_pkt = et.read()
        eth_pkt = pd.decode_raw(raw_pkt)
        # show a one liner of packet
        if verbose:
          one_line = pp.pkt_to_oneliner(eth_pkt)
          print(one_line)
        # handle arp request
        reply_pkt = netpkt.arp.handle_arp(eth_pkt, mac_addr, ip_addr)
        if reply_pkt is None:
          # handle potential pings
          reply_pkt = netpkt.icmp.handle_ping(eth_pkt, ip_addr)
        if reply_pkt is None:
          reply_pkt = netpkt.udp.handle_udp_echo(eth_pkt, ip_addr, udp_port)
        # anything to reply?
        if reply_pkt is not None:
          raw_pkt = reply_pkt.get_packet()
          et.write(raw_pkt)
          if verbose:
            one_line = pp.pkt_to_oneliner(reply_pkt)
            print(one_line)

    except KeyboardInterrupt:
      print("***Break")

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be verbose")
  parser.add_argument('-i', '--interface', default='en3', help="ethernet interface to tap")
  parser.add_argument('-a', '--address', default='192.168.2.221', help="ip address of virtual host")
  parser.add_argument('-p', '--port', default=6800, type=int, help="udp port of virtual host")
  parser.add_argument('-m', '--mac', default="1a:11:af:a0:47:1a", help="mac address of virtual host")
  args = parser.parse_args()
  ethertap_test(args.interface, args.address, args.port, args.mac, verbose=args.verbose)

if __name__ == '__main__':
  main()
