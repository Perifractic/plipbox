#!/usr/bin/env python2.7

from __future__ import print_function

import sys, os
import socket
import argparse
import time

def calc_rate(size, delta):
	return size / (delta * 1000)

def pio_test(ip, port, data_size, count, delay, verbose):
	print("ip=",ip,"port=",port,"data_size",data_size,"count=",count,"delay=",delay,"verbose=",verbose)	
	si = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	si.bind(("", port))
	si.settimeout(1)
	data_add = " " * (data_size - 1)
	avg_delta = 0
	try:
		ok = True
		for i in xrange(count):
			# gen data
			tag = i % 128
			data = chr(64+tag) + data_add
			# send data
			start = time.time()
			si.sendto(data, (ip, port))
			# get data
			(data_in, ip_in) = si.recvfrom(data_size)
			end = time.time()

			# eval data
			delta = end - start
			ok = (data == data_in)
			v = calc_rate(data_size * 2, delta)
			avg_delta += delta
			delta *= 1000 # in ms
			if verbose:
				print("@%d: d=%6.2f ms  v=%6.2f KB/s  ok=%s" % (i,delta,v,ok))
			if not ok:
				print(i,"DATA MISMATCH")
				break
			# do wait?
			if delay > 0:
				time.sleep(delay / 1000.0)

		if ok:
			# calc result
			delta = avg_delta / count
			v = calc_rate(data_size * 2, delta)
			delta *= 1000
			print("@%d: d=%6.2f ms  v=%6.2f KB/s" % (count, delta,v))
	except socket.timeout as e:
		print(e)
	si.close()

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be verbose")
	parser.add_argument('-a', '--address', default="192.168.2.222", help="IP address of plipbox")
	parser.add_argument('-p', '--port', default=6800, type=int, help="UDP port of plipbox")
	parser.add_argument('-s', '--data-size', default=1400, type=int, help="size of test data")
	parser.add_argument('-c', '--count', default=10, type=int, help="number of packets")
	parser.add_argument('-d', '--delay', default=0, type=int, help="delay in ms")
	args = parser.parse_args()
	pio_test(args.address, args.port, args.data_size, args.count, args.delay, args.verbose)

if __name__ == '__main__':
	main()
