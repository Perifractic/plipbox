#!/usr/bin/env python2.7

from __future__ import print_function
import sys
import argparse
import logging
import threading

import pb.ethreader
import pb.pbuaereader
import pb.pbserialreader

# ---- main ----
print("Welcome to plipbox!")

# parse args
parser = argparse.ArgumentParser()
parser.add_argument('pb', choices=['uae', 'ser'], help="select plipbox access mode")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be verbose")
parser.add_argument('-d', '--debug', action='store_true', default=False, help="show debug info")
parser.add_argument('-i', '--interface', default='en3', help="ethernet interface to tap")
parser.add_argument('-p', '--pty', default='/tmp/vpar', help="file node for vpar endpoint")
parser.add_argument('-s', '--serial-port', default="/serial/port", help="serial port device name")
args = parser.parse_args()

# setup logging
logging.basicConfig()
level = logging.WARN
if args.debug:
  level = logging.DEBUG
elif args.verbose:
  level = logging.INFO
log = logging.getLogger("main")
log.setLevel(level)

# create reader
quit_event = threading.Event()
pio = pb.ethreader.EthernetReader(quit_event, args.interface, level=level)
if args.pb == 'uae':
  pb = pb.pbuaereader.PBUAEReader(quit_event, args.pty, level=level)
else:
  pb = pb.pbserialreader.PBSerialReader(quit_event, args.serial_port, level=level)

# try to open pio
try:
  pio.open()
except Exception as e:
  print("ERROR opening PIO for interface '%s':" % args.interface, e)
  sys.exit(1)

# try to open pb
try:
  pb.open()
except Exception as e:
  print("ERROR opening plipbox access:", e)
  pio.close()
  sys.exit(2)

# set senders
pio.set_send_func(pb.send)
pb.set_send_func(pio.send)

# main part
try:
  # start threads
  log.debug("+start")
  pio.start()
  pb.start()
  log.debug("-start")
  # main thread waiting
  print("Press Ctrl-C to quit.")
  log.debug("+main loop")
  try:
    while True:
      if quit_event.wait(1):
        break
  except KeyboardInterrupt:
    print("***Break")
    quit_event.set()
  log.debug("-main loop")
finally:
  # stop threads
  log.debug("stop pio")
  pio.stop()
  log.debug("stop pb")
  pb.stop()
  log.debug("stop done")
  # close resources
  log.debug("close pio")
  pio.close()
  log.debug("close pb")
  pb.close()
  log.debug("close done")

print("done")

