#!/usr/bin/env python2.7

from __future__ import print_function

import sys, os
import time
import argparse
import threading

import pb.veth
import pb.vpar
from pb.pktdecode import PacketDecoder
import pb.ethreader
import pb.pbreader
import pb.ethframe

# ---- main ----
print("Welcome to plipbox!")

# default param
plipbox_mac = pb.ethframe.MacAddress((0x1a,0x11,0xaf,0xa0,0x47,0x11))

# parse args
parser = argparse.ArgumentParser()
parser.add_argument('-r', '--rx', action='store_true', default=False, help="only receive")

parser.add_argument('-e', '--eth-if', default="en1", help="ethernet interface name")
parser.add_argument('-t', '--tap-if', default="tap0", help="tap interface name")
parser.add_argument('-b', '--bridge-if', default="bridge1", help="bridge interface name")

parser.add_argument('-l', '--vpar-link', default="/tmp/vpar", help="link name for vpar pty")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be verbose and dump packets")
parser.add_argument('-a', '--all-packets', action='store_true', default=False, help="show all packets")
parser.add_argument('-d', '--debug', type=int, default=0, help="debug flags: 1=low level, 2=protocol")
parser.add_argument('-E', '--eth-pass', action='store_true', default=False, help="pass all packets on ethernet")
args = parser.parse_args()

def log(*v,**kw):
  global args
  if args.verbose or 'force' in kw:
    print(*v)

# setup plipbox and ethernet
ts_base = time.time()
decoder = PacketDecoder(plipbox_mac)

# setup io modules
ifs = (args.eth_if, args.tap_if, args.bridge_if)
print(ifs)
eth_io = pb.veth.VEth(*ifs)
pb_io = pb.vpar.PBVPar(args.vpar_link, debug=args.debug)

# setup reader
eth = pb.ethreader.EthernetReader(eth_io, args, log, ts_base, decoder)
pb = pb.pbreader.PlipboxReader(pb_io, args, log, ts_base, decoder)

# setup shared env
leave_event = threading.Event()
online_event = threading.Event()
pb.set_env(eth, leave_event, online_event)
eth.set_env(pb, leave_event, online_event, plipbox_mac)

# start reader threads
eth_thread = threading.Thread(target=eth.run)
pb_thread = threading.Thread(target=pb.run)
if eth_thread is not None:
  eth_thread.start()
if pb_thread is not None:
  pb_thread.start()

# main thread waiting for leave event to be set
try:
  log("enter main loop")
  while True:
    leave_event.wait(0.5)
except KeyboardInterrupt:
  log("BREAK [main]")
  leave_event.set()

# shut down
if eth_thread is not None:
  log("joining ethernet")
  eth_thread.join()
if pb_thread is not None:
  log("joining plipbox")
  pb_thread.join()
log("done")
print("exit plipbox")

